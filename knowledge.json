{
    "show me code print hi": [
        "\n\nprint('Hi, there!')",
        "\n\nprint('Hello, world!')",
        "\n\nprint('Greetings!')"
    ],
    "whats 2+2": [
        "result = 2 + 2\nprint(result)",
        "x = 2\ny = 2\nsum = x + y\nprint(sum)",
        "print(2 + 2)"
    ],
    "write function that prints hi": [
        "\n\ndef print_hi():\n  print('Hi!')\nprint_hi()",
        "\n\ndef say_hi():\n  print('Hello!')\nsay_hi()",
        "\n\ndef display_hi():\n  print('Greetings!')\ndisplay_hi()"
    ],
    "if list contains element": [
        "my_list = [1, 2, 3]\nif 2 in my_list:\n    print('Element found in the list.')",
        "numbers = [4, 5, 6]\nif 3 in numbers:\n    print('Element found.')",
        "elements = [7, 8, 9]\nif 7 in elements:\n    print('Element exists.')"
    ],
    "define function": [
        "\ndef add(a, b):\n   return a + b",
        "\ndef subtract(x, y):\n   return x - y",
        "\ndef multiply(p, q):\n   return p * q"
    ],
    "class": [
        "\nclass MyClass:\n   def __init__(self):\n     self.did_work = \"It worked!\"\n     self.print_res()\n\n   def print_res(self):\n     print(self.did_work)\n\nmy_class1 = MyClass()",
        "\nclass Student:\n   def __init__(self, name):\n     self.name = name\n\n   def display_name(self):\n     print(f'My name is {self.name}.')\n\nstudent1 = Student('Alice')\nstudent1.display_name()",
        "\nclass Car:\n   def __init__(self):\n     self.brand = 'Toyota'\n     self.model = 'Camry'\n\n   def display_car_info(self):\n     print(f'Brand: {self.brand}, Model: {self.model}')\n\ncar1 = Car()\ncar1.display_car_info()"
    ],
    "read file": [
        "with open(\"file.txt\", \"r\") as file:\n    content = file.read()\nprint(content)",
        "file = open('data.txt', 'r')\ncontent = file.read()\nfile.close()\nprint(content)",
        "with open('example.txt') as f:\n    lines = f.readlines()\nfor line in lines:\n    print(line.strip())"
    ],
    "write file": [
        "with open('output.txt', 'w') as file:\n    file.write('Hello, world!')",
        "file = open('data.txt', 'w')\nfile.write('This is some data.')\nfile.close()",
        "with open('log.txt', 'a') as file:\n    file.write('Logged some data.\\n')"
    ],
    "convert string uppercase": [
        "my_string = 'hello'\nuppercase_string = my_string.upper()\nprint(uppercase_string)",
        "text = 'welcome'\nuppercase_text = text.upper()\nprint(uppercase_text)",
        "message = 'greetings'\nprint(message.upper())"
    ],
    "convert string lowercase": [
        "my_string = 'Hello World'\nlowercase_string = my_string.lower()\nprint(lowercase_string)",
        "text = 'Great Job!'\nlowercase_text = text.lower()\nprint(lowercase_text)",
        "message = 'NICE TO SEE YOU'\nprint(message.lower())"
    ],
    "remove whitespace string": [
        "text = '   Hello, World!   '\ntrimmed_text = text.strip()\nprint(trimmed_text)",
        "content = '  This is some text.  '\nclean_content = content.strip()\nprint(clean_content)",
        "sentence = '   Welcome to the jungle!    '\nprint(sentence.strip())"
    ],
    "calculate factorial": [
        "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nresult = factorial(5)\nprint(result)",
        "def calculate_factorial(num):\n    result = 1\n    for i in range(1, num+1):\n        result *= i\n    return result\n\nprint(calculate_factorial(6))",
        "def find_factorial(x):\n    fact = 1\n    for i in range(1, x+1):\n        fact *= i\n    return fact\n\nprint(find_factorial(4))"
    ],
    "reverse string": [
        "my_string = 'hello'\nreversed_string = my_string[::-1]\nprint(reversed_string)",
        "text = 'programming'\nreversed_text = text[::-1]\nprint(reversed_text)",
        "message = 'python is fun'\nprint(message[::-1])"
    ],
    "find maximum element list": [
        "my_list = [3, 7, 1, 9, 5]\nmax_element = max(my_list)\nprint(max_element)",
        "numbers = [2, 8, 4, 6]\nmax_number = max(numbers)\nprint(max_number)",
        "values = [10, 20, 5, 30]\nprint(max(values))"
    ],
    "sort list": [
        "my_list = [3, 7, 1, 9, 5]\nmy_list.sort()\nprint(my_list)",
        "numbers = [6, 2, 8, 4]\nnumbers.sort()\nprint(numbers)",
        "data = [55, 11, 33, 22]\ndata.sort()\nprint(data)"
    ],
    "if string palindrome": [
        "my_string = 'radar'\nis_palindrome = my_string == my_string[::-1]\nprint(is_palindrome)",
        "text = 'level'\nreversed_text = text[::-1]\nis_palindrome = text == reversed_text\nprint(is_palindrome)",
        "word = 'deified'\nif word == word[::-1]:\n    print('Palindrome!')\nelse:\n    print('Not a palindrome.')"
    ],
    "count occurrences character string": [
        "my_string = 'hello'\noccurrences = my_string.count('l')\nprint(occurrences)",
        "text = 'programming'\ncount = text.count('m')\nprint(count)",
        "message = 'hello world'\nprint(message.count('l'))"
    ],
    "get current date time": [
        "import datetime\n\ncurrent_datetime = datetime.datetime.now()\nprint(current_datetime)",
        "from datetime import datetime\n\ncurrent_time = datetime.now()\nprint(current_time)",
        "import datetime\n\ndate_time = datetime.datetime.now()\nprint(date_time)"
    ],
    "format strings": [
        "name = 'Alice'\nage = 30\nformatted_string = f'My name is {name} and I am {age} years old'\nprint(formatted_string)",
        "first_name = 'John'\nlast_name = 'Doe'\nformatted_name = f'My name is {first_name} {last_name}'\nprint(formatted_name)",
        "fruit = 'apple'\nquantity = 5\nprint(f'I have {quantity} {fruit}s.')"
    ],
    "use loop": [
        "fruits = ['apple', 'banana', 'cherry']\nfor fruit in fruits:\n    print(fruit)",
        "numbers = [1, 2, 3, 4, 5]\nfor num in numbers:\n    print(num)",
        "colors = ['red', 'green', 'blue']\nfor color in colors:\n    print(color)"
    ],
    "use while loop": [
        "count = 1\nwhile count <= 5:\n    print(f'Count: {count}')\n    count += 1",
        "i = 0\nwhile i < 3:\n    print(f'Index: {i}')\n    i += 1",
        "x = 0\nwhile x < 10:\n    print(x)\n    x += 2"
    ],
    "use if statements": [
        "x = 10\nif x > 5:\n    print('x is greater than 5')",
        "age = 25\nif age >= 18:\n    print('You are an adult.')",
        "num = 7\nif num % 2 == 0:\n    print('Number is even.')\nelse:\n    print('Number is odd.')"
    ],
    "find length string": [
        "my_string = 'hello'\nlength = len(my_string)\nprint(length)",
        "text = 'python'\nlength = len(text)\nprint(length)",
        "message = 'hello world'\nprint(len(message))"
    ],
    "concatenate strings": [
        "str1 = 'Hello'\nstr2 = 'World'\nresult = str1 + ' ' + str2\nprint(result)",
        "first_name = 'John'\nlast_name = 'Doe'\nfull_name = first_name + ' ' + last_name\nprint(full_name)",
        "word1 = 'Hello'\nword2 = 'there'\nprint(word1 + ' ' + word2)"
    ],
    "split string list": [
        "my_string = 'apple orange banana'\nmy_list = my_string.split()\nprint(my_list)",
        "data = 'one, two, three'\nitems = data.split(', ')\nprint(items)",
        "sentence = 'The sky is blue.'\nwords = sentence.split()\nprint(words)"
    ],
    "generate random numbers": [
        "import random\n\nrandom_num = random.randint(1, 10)\nprint(random_num)",
        "from random import randint\n\nnum = randint(100, 200)\nprint(num)",
        "import random\n\nrandom_number = random.randint(1, 1000)\nprint(random_number)"
    ],
    "if data type variable": [
        "x = 5\nif type(x) == int:\n    print('x is an integer')",
        "value = 3.14\nif type(value) == float:\n    print('value is a float')",
        "data = 'Hello'\nif type(data) == str:\n    print('data is a string')"
    ],
    "convert number string": [
        "x = 42\nstr_x = str(x)\nprint(str_x)",
        "num = 7.5\nstr_num = str(num)\nprint(str_num)",
        "value = 100\nprint(str(value))"
    ],
    "get user input": [
        "name = input('Enter your name: ')\nprint(f'Hello, {name}!')",
        "age = input('Enter your age: ')\nprint(f'Your age is: {age}')",
        "choice = input('Enter your choice: ')\nprint(f'You chose: {choice}')"
    ],
    "remove element list": [
        "my_list = [1, 2, 3]\nmy_list.remove(2)\nprint(my_list)",
        "numbers = [10, 20, 30]\nnumbers.remove(20)\nprint(numbers)",
        "data = [5, 10, 15]\ndata.remove(15)\nprint(data)"
    ],
    "if file exists": [
        "import os\n\nfile_path = 'file.txt'\nif os.path.exists(file_path):\n    print('File exists.')",
        "import os\n\nfile_name = 'data.txt'\nif os.path.exists(file_name):\n    print('File exists.')",
        "import os\n\nfilename = 'example.txt'\nif os.path.exists(filename):\n    print('File exists.')"
    ],
    "get current working directory": [
        "import os\n\ncurrent_dir = os.getcwd()\nprint(current_dir)",
        "import os\n\ndir_path = os.getcwd()\nprint(dir_path)",
        "import os\n\ncurrent_directory = os.getcwd()\nprint(current_directory)"
    ],
    "list files directory": [
        "import os\n\nfiles = os.listdir()\nprint(files)",
        "import os\n\nfiles_list = os.listdir()\nprint(files_list)",
        "import os\n\nfile_list = os.listdir()\nprint(file_list)"
    ],
    "create virtual environment": [
        "python3 -m venv myenv",
        "python -m venv myenv",
        "python -m venv myenv"
    ],
    "activate virtual environment": [
        "source myenv/bin/activate",
        "myenv\\Scripts\\activate",
        "source myenv/bin/activate"
    ],
    "install packages using pip virtual environment": [
        "pip install package_name",
        "pip install package_name",
        "pip install package_name"
    ],
    "exit script": [
        "import sys\nsys.exit()",
        "import sys\nsys.exit()",
        "import sys\nsys.exit()"
    ],
    "dictionary": [
        "my_dict = {'key1': 'value1', 'key2': 'value2'}",
        "my_dict = {'name': 'John', 'age': 30}",
        "my_dict = {'color': 'red', 'size': 'medium'}"
    ],
    "access elements dictionary": [
        "my_dict = {'name': 'Alice', 'age': 25}\nprint(my_dict['name'])",
        "info = {'title': 'CEO', 'salary': 10000}\nprint(info['salary'])",
        "data = {'fruit': 'apple', 'color': 'red'}\nprint(data['color'])"
    ],
    "update elements dictionary": [
        "my_dict = {'name': 'Alice', 'age': 25}\nmy_dict['age'] = 30\nprint(my_dict)",
        "info = {'title': 'CEO', 'salary': 10000}\ninfo['salary'] = 12000\nprint(info)",
        "data = {'fruit': 'apple', 'color': 'red'}\ndata['color'] = 'green'\nprint(data)"
    ],
    "remove elements dictionary": [
        "my_dict = {'name': 'Alice', 'age': 25}\nmy_dict.pop('age')\nprint(my_dict)",
        "info = {'title': 'CEO', 'salary': 10000}\ninfo.pop('title')\nprint(info)",
        "data = {'fruit': 'apple', 'color': 'red'}\ndata.pop('color')\nprint(data)"
    ],
    "iterate over items dictionary": [
        "my_dict = {'name': 'Alice', 'age': 25}\nfor key, value in my_dict.items():\n    print(key, value)",
        "info = {'title': 'CEO', 'salary': 10000}\nfor key, value in info.items():\n    print(key, value)",
        "data = {'fruit': 'apple', 'color': 'red'}\nfor key, value in data.items():\n    print(key, value)"
    ],
    "clear list": [
        "my_list = [1, 2, 3]\nmy_list.clear()\nprint(my_list)",
        "numbers = [10, 20, 30]\nnumbers.clear()\nprint(numbers)",
        "data = [5, 10, 15]\ndata.clear()\nprint(data)"
    ],
    "clear dictionary": [
        "my_dict = {'name': 'Alice', 'age': 25}\nmy_dict.clear()\nprint(my_dict)",
        "info = {'title': 'CEO', 'salary': 10000}\ninfo.clear()\nprint(info)",
        "data = {'fruit': 'apple', 'color': 'red'}\ndata.clear()\nprint(data)"
    ],
    "simple calculator program": [
        "\ndef calculate(num1, num2):\n  return num1 + num2\n\nresult = calculate(5, 3)\nprint(result)",
        "\ndef calculate(a, b):\n  return a - b\n\nresult = calculate(10, 3)\nprint(result)",
        "\ndef calculate(x, y):\n  return x * y\n\nresult = calculate(4, 5)\nprint(result)"
    ],
    "get sum 2 numbers": [
        "def add(*args):\n  return sum(args)\n\nresult = add(3, 5)\nprint(result)",
        "def add(a, b):\n  return a + b\n\nresult = add(8, 2)\nprint(result)",
        "def add(x, y):\n  return x + y\n\nresult = add(6, 4)\nprint(result)"
    ],
    "are bot": [
        "This is a simple chatbot or a text-based conversational agent.\nIt responds to user inputs using predefined patterns and responses stored in a knowledge base.\nAlthough it lacks real intelligence and is based on fixed response patterns, it is still designed to provide interactions with users and handle certain queries based on the knowledge it has been provided."
    ]
}
